#include "sort.h"

void swapNodes(listint_t *a, listint_t *b)
{
	if (a->prev)
		a->prev->next = b;
	if (b->next)
		b->next->prev = a;
	b->prev = a->prev;
	a->next = b->next;
	b->next = a;
	a->prev = b;
}

void cocktail_sort_list(listint_t **list)
{
	listint_t *left, *right;
	size_t len = 0, traversed = 0;

	if (!list || !(*list) || (*list)->next == NULL)
		return;

	left = *list;
	right = NULL;

	while (traversed < len || len == 0)
	{
		while (left->next)
		{
			if (!traversed)
				len++;
			if (left->n > left->next->n)
			{
				swapNodes(left, left->next);
/**
				if (!left->prev)
				*list = left;*/
				print_list(*list);
			}
			else
				left = left->next;
		}

		traversed++;
		right = left;

		while (right->prev)
		{
			if (right->n < right->prev->n)
			{
				swapNodes(right->prev, right);
				if (!right->next)
					*list = right;
				print_list(*list);
			}
			else
				right = right->prev;
		}

		left = right;
	}
}
